import org.sireum.logika._

// Given a non-negative integer argument n,
// factorial computes n!, where n! is defined as follows
//   0! == 1
//   1! == 1 * 0!
//   2! == 2 * 1!
//   …
//   n! == n * (n – 1)!     (if n > 0)

l"""{
  fact // axioms
    def f(x: Z): Z
      = 1,            if x == 0    (fZero)
      = f(x - 1) * x, if x > 0     (fPos)
}"""

def factorial(n: Z): Z = {

  l"""{ requires n ≥ 0
        ensures result == f(n)                       }"""
  var r: Z = 1
  var i: Z = 0

  while (i < n) {
    l"""{ invariant r == f(i)
                    i ≥ 0
                    i ≤ n
          modifies r, i }"""
    i = i + 1

    r = r * i

  }

  return r
}